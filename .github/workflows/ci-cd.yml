name: Test, Analyze and Deploy

on:
  push:
    branches:
      - "**"  # Run on all branch pushes for tests/analysis
  pull_request:
    branches:
      - "**"  # Run on all PRs for tests/analysis

jobs:
  test-and-analyze:
    name: Test and SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage

      - name: Run Tests with Coverage
        env:
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          coverage run manage.py test laporan
          coverage xml

      - name: Run SonarQube Scanner
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=dkn-pos-umkm-be
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.exclusions=manage.py,backend/settings.py,backend/wsgi.py,backend/asgi.py,backend/urls.py,backend/migrations/**

  deploy:
    name: Deploy Application
    needs: test-and-analyze  # This makes deployment dependent on test-and-analyze job
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.base_ref == 'main' || github.base_ref == 'staging'  # Only deploy for main or staging
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
      
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Set version
        id: version
        run: |
          # Set default version from version.txt
          VERSION=$(cat version.txt)
          
          # If this is a tagged release, use the tag
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set environment variables
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ] || [ "${{ github.base_ref }}" == "main" ]; then
            echo "BRANCH=prod" >> $GITHUB_ENV
            echo "PORT=8000" >> $GITHUB_ENV
            echo "DB_PORT_HOST=5432" >> $GITHUB_ENV
            echo "SENTRY_DSN_VAR=SENTRY_DSN_PROD" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/staging" ] || [ "${{ github.base_ref }}" == "staging" ]; then
            echo "BRANCH=staging" >> $GITHUB_ENV
            echo "PORT=8001" >> $GITHUB_ENV
            echo "DB_PORT_HOST=5433" >> $GITHUB_ENV
            echo "SENTRY_DSN_VAR=SENTRY_DSN_STAGING" >> $GITHUB_ENV
          else
            echo "BRANCH=dev" >> $GITHUB_ENV
            echo "PORT=8002" >> $GITHUB_ENV
            echo "DB_PORT_HOST=5434" >> $GITHUB_ENV
            echo "SENTRY_DSN_VAR=SENTRY_DSN_DEV" >> $GITHUB_ENV
          fi

      - name: Build and Push Docker Image
        run: |
          # Build the image with version as build arg
          docker build -t my-django-app --build-arg VERSION=${{ env.VERSION }} .
          
          # Tag with version and environment
          docker tag my-django-app christophernw/dkn-pos-umkm-be:${{ env.VERSION }}-${{ env.BRANCH }}
          
          # Also tag with branch name for backward compatibility
          docker tag my-django-app christophernw/dkn-pos-umkm-be:${{ env.BRANCH }}
          
          # Push both tags
          docker push christophernw/dkn-pos-umkm-be:${{ env.VERSION }}-${{ env.BRANCH }}
          docker push christophernw/dkn-pos-umkm-be:${{ env.BRANCH }}

      - name: Copy docker-compose files
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << EOF
            # Create directories if they don't exist
            mkdir -p ~/postgres-db-${{ env.BRANCH }}
            mkdir -p ~/django-be-${{ env.BRANCH }}
          EOF
          
          # Then copy the docker-compose files
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no docker-compose.prod.${{ env.BRANCH }}.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/django-be-${{ env.BRANCH }}/docker-compose.yml
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no docker-compose.db.${{ env.BRANCH }}.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/postgres-db-${{ env.BRANCH }}/docker-compose.yml

      - name: Deploy database and web application
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << EOF
            cd ~/django-be-${{ env.BRANCH }}
            echo "BRANCH=${{ env.BRANCH }}" > .env
            echo "PORT=${{ env.PORT }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "VERSION=${{ env.VERSION }}" >> .env  # Add VERSION to environment
            
            # Dynamically choose correct Sentry DSN based on environment
            if [ "${{ env.BRANCH }}" == "prod" ]; then
              echo "SENTRY_DSN_PROD=${{ secrets.SENTRY_DSN_PROD }}" >> .env
            elif [ "${{ env.BRANCH }}" == "staging" ]; then
              echo "SENTRY_DSN_STAGING=${{ secrets.SENTRY_DSN_STAGING }}" >> .env
            else
              echo "SENTRY_DSN_DEV=${{ secrets.SENTRY_DSN_DEV }}" >> .env
            fi
            
            docker-compose --env-file .env pull
            docker-compose --env-file .env down --remove-orphans
            docker-compose --env-file .env up -d
          EOF