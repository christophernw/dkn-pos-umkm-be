name: Deploy Django App

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass
      
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Set environment variables
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ] || [ "${{ github.base_ref }}" == "main" ]; then
          echo "BRANCH=main" >> $GITHUB_ENV
          echo "PORT=8000" >> $GITHUB_ENV
          echo "DB_PORT_HOST=5432" >> $GITHUB_ENV
        elif [ "${{ github.ref }}" == "refs/heads/staging" ] || [ "${{ github.base_ref }}" == "staging" ]; then
          echo "BRANCH=staging" >> $GITHUB_ENV
          echo "PORT=8001" >> $GITHUB_ENV
          echo "DB_PORT_HOST=5433" >> $GITHUB_ENV
        else
          echo "BRANCH=dev" >> $GITHUB_ENV
          echo "PORT=8002" >> $GITHUB_ENV
          echo "DB_PORT_HOST=5434" >> $GITHUB_ENV
        fi

    - name: Build and Push Docker Image
      run: |
        docker build -t my-django-app .
        docker tag my-django-app christophernw/dkn-pos-umkm-be:${{ env.BRANCH }}
        docker push christophernw/dkn-pos-umkm-be:${{ env.BRANCH }}

    - name: Copy docker-compose file
      run: |
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/django-be/docker-compose.yml

    - name: Deploy with docker-compose
      run: |
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << EOF
          cd django-be

          # Set environment values
          echo "BRANCH=${{ env.BRANCH }}" > .env
          echo "PORT=${{ env.PORT }}" >> .env
          echo "DB_PORT_HOST=${{ env.DB_PORT_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

          export $(cat .env | xargs)
          docker volume inspect postgres_${BRANCH}_data > /dev/null 2>&1 || docker volume create postgres_${BRANCH}_data

          # Pull latest image (optional but good practice)
          docker-compose --env-file .env pull

          # Restart containers
          docker-compose --env-file .env down
          docker-compose --env-file .env up -d
        EOF
