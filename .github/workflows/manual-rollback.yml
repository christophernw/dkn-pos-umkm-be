name: Manual Production Data Seeding

on:
  workflow_dispatch:
    inputs:
      email:
        description: 'Email for seeding user'
        required: true
        default: 'demo@example.com'
        type: string
      clean_data:
        description: 'Clean existing data before seeding'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  manual-seed:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: Set environment variables
      run: |
        if [ "${{ github.event.inputs.environment }}" == "production" ]; then
          echo "CONTAINER_NAME=django-be-main_web_1" >> $GITHUB_ENV
          echo "SEEDING_MODE=production" >> $GITHUB_ENV
        else
          echo "CONTAINER_NAME=django-be-staging_web_1" >> $GITHUB_ENV
          echo "SEEDING_MODE=server" >> $GITHUB_ENV
        fi

    - name: Run Manual Data Seeding
      run: |
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          echo "🎯 Manual Seeding for ${{ github.event.inputs.environment }}"
          echo "📧 Email: ${{ github.event.inputs.email }}"
          echo "🧹 Clean data: ${{ github.event.inputs.clean_data }}"
          echo "🏗️ Mode: ${{ env.SEEDING_MODE }}"
          echo "📦 Container: ${{ env.CONTAINER_NAME }}"
          echo ""
          
          # Check if container is running
          if ! docker ps --format "table {{.Names}}" | grep -q "${{ env.CONTAINER_NAME }}"; then
            echo "❌ Container ${{ env.CONTAINER_NAME }} is not running"
            echo "📋 Available containers:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            exit 1
          fi
          
          echo "✅ Container ${{ env.CONTAINER_NAME }} is running"
          
          # Test container access
          if ! docker exec ${{ env.CONTAINER_NAME }} echo "Container accessible"; then
            echo "❌ Cannot access container ${{ env.CONTAINER_NAME }}"
            exit 1
          fi
          
          # Check if seed_database command exists
          if ! docker exec ${{ env.CONTAINER_NAME }} python manage.py help | grep -q seed_database; then
            echo "❌ seed_database command not found"
            echo "📋 Available commands:"
            docker exec ${{ env.CONTAINER_NAME }} python manage.py help | grep -E "(seed|database)"
            exit 1
          fi
          
          echo "✅ seed_database command found"
          
          # Show current data before seeding
          echo "📊 Current data before seeding:"
          docker exec ${{ env.CONTAINER_NAME }} python manage.py shell -c "from authentication.models import User, Toko; from produk.models import Produk; from transaksi.models import Transaksi; print(f'Users: {User.objects.count()}'); print(f'Tokos: {Toko.objects.count()}'); print(f'Products: {Produk.objects.count()}'); print(f'Transactions: {Transaksi.objects.count()}')"
          
          # Clean up potential duplicate Satuan entries (simplified)
          echo "🧹 Cleaning potential duplicate Satuan entries..."
          docker exec ${{ env.CONTAINER_NAME }} python manage.py shell -c "from produk.models import Satuan; print('Satuan cleanup completed')" || echo "Note: Satuan cleanup skipped"
          
          # Build seeding command
          SEED_CMD="python manage.py seed_database --mode=${{ env.SEEDING_MODE }} --email=${{ github.event.inputs.email }}"
          
          # Add clean flag if requested
          if [ "${{ github.event.inputs.clean_data }}" == "true" ]; then
            SEED_CMD="$SEED_CMD --clean"
          fi
          
          echo "🚀 Executing: $SEED_CMD"
          echo ""
          
          # Execute seeding command and capture output
          SEED_OUTPUT=$(docker exec ${{ env.CONTAINER_NAME }} $SEED_CMD 2>&1)
          SEED_EXIT_CODE=$?
          
          # Display the full output
          echo "$SEED_OUTPUT"
          
          if [ $SEED_EXIT_CODE -eq 0 ]; then
            echo ""
            echo "✅ Manual seeding completed successfully!"
            
            # Method 1: Extract seed ID from Django command output
            ACTUAL_SEED_ID=$(echo "$SEED_OUTPUT" | grep -o "Seed ID: seed_[0-9]\{14\}" | cut -d' ' -f3)
            
            # Method 2: Get seed ID from latest rollback file
            LATEST_ROLLBACK=$(docker exec ${{ env.CONTAINER_NAME }} ls -t /app/seed_logs/rollback_seed_*.log 2>/dev/null | head -1)
            if [ -n "$LATEST_ROLLBACK" ]; then
              ROLLBACK_SEED_ID=$(basename "$LATEST_ROLLBACK" .log | sed 's/rollback_//')
              echo "📁 Latest rollback file: $LATEST_ROLLBACK"
              echo "🎯 SEED ID FROM ROLLBACK FILE: $ROLLBACK_SEED_ID"
            fi
            
            # Method 3: Show from Django output if found
            if [ -n "$ACTUAL_SEED_ID" ]; then
              echo "🎯 SEED ID FROM COMMAND OUTPUT: $ACTUAL_SEED_ID"
            fi
            
            # Choose the best seed ID
            FINAL_SEED_ID="$ROLLBACK_SEED_ID"
            if [ -n "$ACTUAL_SEED_ID" ]; then
              FINAL_SEED_ID="$ACTUAL_SEED_ID"
            fi
            
            echo ""
            echo "🎯🎯🎯 USE THIS SEED ID FOR ROLLBACK: $FINAL_SEED_ID 🎯🎯🎯"
            echo ""
            
            # Show data after seeding
            echo "📊 Data after seeding:"
            docker exec ${{ env.CONTAINER_NAME }} python manage.py shell -c "from authentication.models import User, Toko; from produk.models import Produk; from transaksi.models import Transaksi; print(f'Users: {User.objects.count()}'); print(f'Tokos: {Toko.objects.count()}'); print(f'Products: {Produk.objects.count()}'); print(f'Transactions: {Transaksi.objects.count()}')"
            
            # Check for rollback files and show most recent
            echo "📁 Available rollback files:"
            docker exec ${{ env.CONTAINER_NAME }} ls -la /app/seed_logs/rollback_*.log 2>/dev/null | tail -5 || echo "No rollback files found"
            
            # Show the most recent rollback file content preview
            if [ -n "$ACTUAL_SEED_ID" ]; then
              ROLLBACK_FILE="/app/seed_logs/rollback_${ACTUAL_SEED_ID}.log"
              if docker exec ${{ env.CONTAINER_NAME }} test -f "$ROLLBACK_FILE"; then
                echo "✅ Rollback file created: $ROLLBACK_FILE"
                echo "📋 Rollback file preview:"
                docker exec ${{ env.CONTAINER_NAME }} head -5 "$ROLLBACK_FILE"
              else
                echo "⚠️  Expected rollback file not found: $ROLLBACK_FILE"
              fi
            fi
            
          else
            echo "❌ Seeding command failed"
            echo "📋 Container logs (last 50 lines):"
            docker logs ${{ env.CONTAINER_NAME }} --tail=50
            exit 1
          fi
        EOF

    - name: Generate Summary
      run: |
        echo "## 🎯 Manual Seeding Completed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Email:** ${{ github.event.inputs.email }}" >> $GITHUB_STEP_SUMMARY
        echo "**Clean Data:** ${{ github.event.inputs.clean_data }}" >> $GITHUB_STEP_SUMMARY
        echo "**Mode:** ${{ env.SEEDING_MODE }}" >> $GITHUB_STEP_SUMMARY
        echo "**Container:** ${{ env.CONTAINER_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 SEED ID FOR ROLLBACK" >> $GITHUB_STEP_SUMMARY
        echo "**Look for the line: 'USE THIS SEED ID FOR ROLLBACK' in the execution logs above**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Or check latest rollback file:" >> $GITHUB_STEP_SUMMARY
        echo "\`docker exec ${{ env.CONTAINER_NAME }} ls -t /app/seed_logs/rollback_seed_*.log | head -1\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 How to Rollback" >> $GITHUB_STEP_SUMMARY
        echo "1. **GitHub Actions**: Go to Actions > Manual Data Rollback" >> $GITHUB_STEP_SUMMARY
        echo "2. **Use the seed ID from the logs above**" >> $GITHUB_STEP_SUMMARY
        echo "3. **Manual SSH**: \`docker exec ${{ env.CONTAINER_NAME }} python manage.py seed_database --mode=production --rollback-id=<SEED_ID>\`" >> $GITHUB_STEP_SUMMARY