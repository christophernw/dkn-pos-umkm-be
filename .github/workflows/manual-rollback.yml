name: Manual Data Rollback

on:
  workflow_dispatch:
    inputs:
      seed_id:
        description: 'Seed ID to rollback (e.g., seed_20250526063532)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      dry_run:
        description: 'Dry run (preview what would be rolled back)'
        required: false
        default: true
        type: boolean

jobs:
  manual-rollback:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: Set environment variables
      run: |
        if [ "${{ github.event.inputs.environment }}" == "production" ]; then
          echo "CONTAINER_NAME=django-be-main_web_1" >> $GITHUB_ENV
        else
          echo "CONTAINER_NAME=django-be-staging_web_1" >> $GITHUB_ENV
        fi

    - name: Validate Seed ID Format
      run: |
        SEED_ID="${{ github.event.inputs.seed_id }}"
        if [[ ! $SEED_ID =~ ^seed_[0-9]{14}$ ]] && [[ ! $SEED_ID =~ ^[0-9]{14}$ ]]; then
          echo "‚ùå Invalid seed ID format."
          echo "Expected: seed_YYYYMMDDHHMMSS or YYYYMMDDHHMMSS"
          echo "Example: seed_20250526063532"
          exit 1
        fi
        echo "‚úÖ Seed ID format is valid: $SEED_ID"

    - name: Execute Rollback
      run: |
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          echo "üîÑ Manual Rollback Operation"
          echo "üì¶ Container: ${{ env.CONTAINER_NAME }}"
          echo "üÜî Seed ID: ${{ github.event.inputs.seed_id }}"
          echo "üîç Dry Run: ${{ github.event.inputs.dry_run }}"
          echo "üåç Environment: ${{ github.event.inputs.environment }}"
          echo ""
          
          # Check if container is running
          if ! docker ps --format "table {{.Names}}" | grep -q "${{ env.CONTAINER_NAME }}"; then
            echo "‚ùå Container ${{ env.CONTAINER_NAME }} is not running"
            echo "üìã Available containers:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            exit 1
          fi
          
          echo "‚úÖ Container ${{ env.CONTAINER_NAME }} is running"
          
          # Prepare seed ID (handle both formats)
          SEED_ID="${{ github.event.inputs.seed_id }}"
          if [[ $SEED_ID == seed_* ]]; then
            FULL_SEED_ID=$SEED_ID
          else
            FULL_SEED_ID="seed_$SEED_ID"
          fi
          
          # Check if rollback log file exists
          LOG_FILE="/app/seed_logs/rollback_${FULL_SEED_ID}.log"
          
          if ! docker exec ${{ env.CONTAINER_NAME }} test -f "$LOG_FILE"; then
            echo "‚ùå Rollback log file not found: $LOG_FILE"
            echo "üìÅ Available rollback files:"
            docker exec ${{ env.CONTAINER_NAME }} ls -la /app/seed_logs/rollback_*.log 2>/dev/null || echo "No rollback files found"
            exit 1
          fi
          
          echo "‚úÖ Found rollback log file: $LOG_FILE"
          
          # Show current data before rollback
          echo "üìä Current data before rollback:"
          docker exec ${{ env.CONTAINER_NAME }} python manage.py shell -c "
            from authentication.models import User, Toko
            from produk.models import Produk
            from transaksi.models import Transaksi
            print(f'Users: {User.objects.count()}')
            print(f'Tokos: {Toko.objects.count()}')
            print(f'Products: {Produk.objects.count()}')
            print(f'Transactions: {Transaksi.objects.count()}')
            "
          
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo ""
            echo "üîç DRY RUN - Preview of rollback operation:"
            echo "üìã Rollback log preview (first 20 lines):"
            docker exec ${{ env.CONTAINER_NAME }} head -20 "$LOG_FILE"
            echo ""
            echo "üìä Summary of entities to be rolled back:"
            docker exec ${{ env.CONTAINER_NAME }} grep -E "^(TOTAL_|CREATED_)" "$LOG_FILE" | grep -E "(PRODUCTS|CATEGORIES|TRANSACTIONS|TRANSACTION_ITEMS)" | sort
            echo ""
            echo "‚ÑπÔ∏è  This was a DRY RUN - no changes were made"
            echo "To execute actual rollback, run this workflow again with dry_run=false"
          else
            echo ""
            echo "üîÑ Executing rollback for seed ID: $FULL_SEED_ID"
            echo "‚ö†Ô∏è  This will permanently delete the seeded data!"
            
            if docker exec ${{ env.CONTAINER_NAME }} python manage.py seed_database --mode=production --rollback-id="$FULL_SEED_ID"; then
              echo ""
              echo "‚úÖ Rollback completed successfully!"
              
              # Show data after rollback
              echo "üìä Data after rollback:"
              docker exec ${{ env.CONTAINER_NAME }} python manage.py shell -c "
                from authentication.models import User, Toko
                from produk.models import Produk
                from transaksi.models import Transaksi
                print(f'Users: {User.objects.count()}')
                print(f'Tokos: {Toko.objects.count()}')
                print(f'Products: {Produk.objects.count()}')
                print(f'Transactions: {Transaksi.objects.count()}')
                "
            else
              echo "‚ùå Rollback failed!"
              echo "üìã Container logs (last 50 lines):"
              docker logs ${{ env.CONTAINER_NAME }} --tail=50
              exit 1
            fi
          fi
        EOF

    - name: Generate Summary
      run: |
        echo "## üîÑ Rollback Operation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Container:** ${{ env.CONTAINER_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Seed ID:** ${{ github.event.inputs.seed_id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Dry Run:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
          echo "### üîç This was a DRY RUN" >> $GITHUB_STEP_SUMMARY
          echo "No actual changes were made. To execute the rollback:" >> $GITHUB_STEP_SUMMARY
          echo "1. Run this workflow again with **dry_run=false**" >> $GITHUB_STEP_SUMMARY
          echo "2. Or manually: \`docker exec ${{ env.CONTAINER_NAME }} python manage.py seed_database --mode=production --rollback-id=${{ github.event.inputs.seed_id }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚úÖ Rollback Executed" >> $GITHUB_STEP_SUMMARY
          echo "The seeding operation has been successfully rolled back." >> $GITHUB_STEP_SUMMARY
          echo "**Seed ID rolled back:** ${{ github.event.inputs.seed_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Result" >> $GITHUB_STEP_SUMMARY
          echo "Seeded data has been removed while preserving existing data." >> $GITHUB_STEP_SUMMARY
        fi