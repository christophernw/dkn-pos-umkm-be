name: SonarQube Analysis

on:
  push:
    branches: 
      - "**"
  pull_request:
    branches: 
      - "**"

jobs:
  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetches all history for better SonarQube analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-cov
      
      - name: Run Tests with Coverage for App Laporan
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          # Run tests with detailed coverage for laporan app only
          pytest --cov=laporan --cov-report=xml:coverage.xml --cov-report=term --cov-branch
          
          # Extract coverage percentage for quality gate check
          COVERAGE_PCT=$(coverage report | grep TOTAL | awk '{print $NF}' | sed 's/%//')
          echo "COVERAGE_PCT=${COVERAGE_PCT}" >> $GITHUB_ENV
          echo "Overall coverage: ${COVERAGE_PCT}%"
      
      - name: SonarQube Quality Gate Check
        run: |
          # Define minimum required coverage (adjust as needed)
          MIN_COVERAGE=90
          
          if (( $(echo "$COVERAGE_PCT < $MIN_COVERAGE" | bc -l) )); then
            echo "::error::Code coverage is below minimum required: ${COVERAGE_PCT}% < ${MIN_COVERAGE}%"
            exit 1
          else
            echo "::notice::Code coverage meets requirements: ${COVERAGE_PCT}% â‰¥ ${MIN_COVERAGE}%"
          fi
      
      - name: Run SonarQube Scanner
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=dkn-pos-umkm-be
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.exclusions=manage.py,backend/settings.py,backend/wsgi.py,backend/asgi.py,backend/urls.py,backend/migrations/**,**/tests/**,**/test_*.py
            -Dsonar.inclusions=laporan/**
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

      - name: Generate Coverage Badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p badges
          echo "{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"${COVERAGE_PCT}%\",\"color\":\"$([ $(echo "$COVERAGE_PCT >= 90" | bc -l) -eq 1 ] && echo "brightgreen" || [ $(echo "$COVERAGE_PCT >= 80" | bc -l) -eq 1 ] && echo "green" || [ $(echo "$COVERAGE_PCT >= 70" | bc -l) -eq 1 ] && echo "yellowgreen" || [ $(echo "$COVERAGE_PCT >= 60" | bc -l) -eq 1 ] && echo "yellow" || echo "red")\"}" > badges/coverage.json
      
      - name: Upload Coverage Badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-badge
          path: badges/