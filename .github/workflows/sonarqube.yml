name: SonarQube Quality Assurance

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  # Add scheduled analysis for nightly builds
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC every day

jobs:
  quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for better analysis and reporting
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-django pytest-cov flake8 black isort bandit
          
      - name: Run Code Style Checks
        run: |
          echo "Running code style checks..."
          flake8 laporan --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check laporan
          isort --check-only --profile black laporan
      
      - name: Run Security Checks with Bandit
        run: |
          bandit -r laporan -f json -o bandit-results.json || true
          
      - name: Run Tests with Coverage
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          # First run overall project tests
          echo "Running overall project tests..."
          coverage run --source='.' manage.py test
          coverage xml -o coverage-all.xml
          coverage report
          
          # Then run focused tests on laporan app with stricter coverage requirements
          echo "Running laporan app tests with strict coverage..."
          coverage run --source='laporan' manage.py test laporan
          coverage xml -o coverage-laporan.xml
          
          # Check if laporan module meets 100% coverage threshold
          coverage report --fail-under=100 || echo "WARNING: Coverage for laporan app is below 100%"
          
      - name: Generate Test Report
        if: always()
        run: |
          echo "## Test Results" > test-report.md
          echo "### Overall Coverage: $(coverage report | grep TOTAL | awk '{print $4}')" >> test-report.md
          echo "### Laporan App Coverage: $(coverage report --include='laporan/*' | grep TOTAL | awk '{print $4}')" >> test-report.md
          
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=dkn-pos-umkm-be
            -Dsonar.projectName="DKN POS UMKM Backend"
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.python.coverage.reportPaths=coverage-all.xml,coverage-laporan.xml
            -Dsonar.python.xunit.reportPath=test-results.xml
            -Dsonar.python.bandit.reportPaths=bandit-results.json
            -Dsonar.exclusions=**/migrations/**,**/tests/**,manage.py,backend/settings.py,backend/wsgi.py,backend/asgi.py,backend/urls.py
            -Dsonar.inclusions=laporan/**
            -Dsonar.qualitygate.wait=true
      
      - name: SonarQube Quality Gate Check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      - name: Upload Code Coverage Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: |
            coverage-*.xml
            test-report.md
            
  enforce-coverage:
    name: Enforce Code Coverage Policy
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage
          
      - name: Run Coverage for Laporan App
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          # Only run tests for laporan app with strict requirements
          coverage run --source='laporan' manage.py test laporan
          
          # This will fail the workflow if coverage is below 100% for laporan app
          coverage report --fail-under=100
          
      - name: Post Coverage Comment on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: code-coverage
          message: |
            ## Code Coverage Report for Laporan App
            
            This PR must maintain 100% code coverage for the laporan app to be merged.
            
            Current coverage: $(coverage report --include='laporan/*' | grep TOTAL | awk '{print $4}')
            
            Note: The CI pipeline will fail if coverage drops below 100% for the laporan app.